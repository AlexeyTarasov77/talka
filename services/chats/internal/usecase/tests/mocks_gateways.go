// Code generated by MockGen. DO NOT EDIT.
// Source: contracts.go
//
// Generated by this command:
//
//	mockgen -source=contracts.go -destination=../usecase/tests/mocks_gateways.go -package=usecase_test
//

// Package usecase_test is a generated GoMock package.
package usecase_test

import (
	context "context"
	reflect "reflect"
	time "time"

	entity "github.com/AlexeyTarasov77/messanger.chats/internal/entity"
	gateways "github.com/AlexeyTarasov77/messanger.chats/internal/gateways"
	gomock "go.uber.org/mock/gomock"
)

// MockChatsRepo is a mock of ChatsRepo interface.
type MockChatsRepo struct {
	ctrl     *gomock.Controller
	recorder *MockChatsRepoMockRecorder
	isgomock struct{}
}

// MockChatsRepoMockRecorder is the mock recorder for MockChatsRepo.
type MockChatsRepoMockRecorder struct {
	mock *MockChatsRepo
}

// NewMockChatsRepo creates a new mock instance.
func NewMockChatsRepo(ctrl *gomock.Controller) *MockChatsRepo {
	mock := &MockChatsRepo{ctrl: ctrl}
	mock.recorder = &MockChatsRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockChatsRepo) EXPECT() *MockChatsRepoMockRecorder {
	return m.recorder
}

// AddMembers mocks base method.
func (m *MockChatsRepo) AddMembers(ctx context.Context, groupChatId int, membersIds []int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddMembers", ctx, groupChatId, membersIds)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddMembers indicates an expected call of AddMembers.
func (mr *MockChatsRepoMockRecorder) AddMembers(ctx, groupChatId, membersIds any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddMembers", reflect.TypeOf((*MockChatsRepo)(nil).AddMembers), ctx, groupChatId, membersIds)
}

// CountJoinRequestsByLink mocks base method.
func (m *MockChatsRepo) CountJoinRequestsByLink(ctx context.Context, groupId, linkId int) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountJoinRequestsByLink", ctx, groupId, linkId)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountJoinRequestsByLink indicates an expected call of CountJoinRequestsByLink.
func (mr *MockChatsRepoMockRecorder) CountJoinRequestsByLink(ctx, groupId, linkId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountJoinRequestsByLink", reflect.TypeOf((*MockChatsRepo)(nil).CountJoinRequestsByLink), ctx, groupId, linkId)
}

// CountMembersByLink mocks base method.
func (m *MockChatsRepo) CountMembersByLink(ctx context.Context, groupId, linkId int) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountMembersByLink", ctx, groupId, linkId)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountMembersByLink indicates an expected call of CountMembersByLink.
func (mr *MockChatsRepoMockRecorder) CountMembersByLink(ctx, groupId, linkId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountMembersByLink", reflect.TypeOf((*MockChatsRepo)(nil).CountMembersByLink), ctx, groupId, linkId)
}

// CreateJoinReq mocks base method.
func (m *MockChatsRepo) CreateJoinReq(ctx context.Context, userId, chatId int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateJoinReq", ctx, userId, chatId)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateJoinReq indicates an expected call of CreateJoinReq.
func (mr *MockChatsRepoMockRecorder) CreateJoinReq(ctx, userId, chatId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateJoinReq", reflect.TypeOf((*MockChatsRepo)(nil).CreateJoinReq), ctx, userId, chatId)
}

// GetAll mocks base method.
func (m *MockChatsRepo) GetAll(ctx context.Context) ([]entity.Chat, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", ctx)
	ret0, _ := ret[0].([]entity.Chat)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockChatsRepoMockRecorder) GetAll(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockChatsRepo)(nil).GetAll), ctx)
}

// GetById mocks base method.
func (m *MockChatsRepo) GetById(ctx context.Context, chatId int) (entity.ChatWithMessages, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetById", ctx, chatId)
	ret0, _ := ret[0].(entity.ChatWithMessages)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetById indicates an expected call of GetById.
func (mr *MockChatsRepoMockRecorder) GetById(ctx, chatId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetById", reflect.TypeOf((*MockChatsRepo)(nil).GetById), ctx, chatId)
}

// GetGroupByLink mocks base method.
func (m *MockChatsRepo) GetGroupByLink(ctx context.Context, link string) (*entity.GroupChat, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGroupByLink", ctx, link)
	ret0, _ := ret[0].(*entity.GroupChat)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGroupByLink indicates an expected call of GetGroupByLink.
func (mr *MockChatsRepoMockRecorder) GetGroupByLink(ctx, link any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGroupByLink", reflect.TypeOf((*MockChatsRepo)(nil).GetGroupByLink), ctx, link)
}

// Save mocks base method.
func (m *MockChatsRepo) Save(ctx context.Context, chat entity.Chat) (entity.Chat, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", ctx, chat)
	ret0, _ := ret[0].(entity.Chat)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Save indicates an expected call of Save.
func (mr *MockChatsRepoMockRecorder) Save(ctx, chat any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockChatsRepo)(nil).Save), ctx, chat)
}

// UpdateLastMsgInfo mocks base method.
func (m *MockChatsRepo) UpdateLastMsgInfo(ctx context.Context, chatId int, msgText string, msgDate time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateLastMsgInfo", ctx, chatId, msgText, msgDate)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateLastMsgInfo indicates an expected call of UpdateLastMsgInfo.
func (mr *MockChatsRepoMockRecorder) UpdateLastMsgInfo(ctx, chatId, msgText, msgDate any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateLastMsgInfo", reflect.TypeOf((*MockChatsRepo)(nil).UpdateLastMsgInfo), ctx, chatId, msgText, msgDate)
}

// MockInvitationLinksRepo is a mock of InvitationLinksRepo interface.
type MockInvitationLinksRepo struct {
	ctrl     *gomock.Controller
	recorder *MockInvitationLinksRepoMockRecorder
	isgomock struct{}
}

// MockInvitationLinksRepoMockRecorder is the mock recorder for MockInvitationLinksRepo.
type MockInvitationLinksRepoMockRecorder struct {
	mock *MockInvitationLinksRepo
}

// NewMockInvitationLinksRepo creates a new mock instance.
func NewMockInvitationLinksRepo(ctrl *gomock.Controller) *MockInvitationLinksRepo {
	mock := &MockInvitationLinksRepo{ctrl: ctrl}
	mock.recorder = &MockInvitationLinksRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInvitationLinksRepo) EXPECT() *MockInvitationLinksRepoMockRecorder {
	return m.recorder
}

// CheckExistsByUrl mocks base method.
func (m *MockInvitationLinksRepo) CheckExistsByUrl(ctx context.Context, url string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckExistsByUrl", ctx, url)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckExistsByUrl indicates an expected call of CheckExistsByUrl.
func (mr *MockInvitationLinksRepoMockRecorder) CheckExistsByUrl(ctx, url any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckExistsByUrl", reflect.TypeOf((*MockInvitationLinksRepo)(nil).CheckExistsByUrl), ctx, url)
}

// GetByUrl mocks base method.
func (m *MockInvitationLinksRepo) GetByUrl(ctx context.Context, url string) (*entity.InvitationLink, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByUrl", ctx, url)
	ret0, _ := ret[0].(*entity.InvitationLink)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByUrl indicates an expected call of GetByUrl.
func (mr *MockInvitationLinksRepoMockRecorder) GetByUrl(ctx, url any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByUrl", reflect.TypeOf((*MockInvitationLinksRepo)(nil).GetByUrl), ctx, url)
}

// MockUsersRepo is a mock of UsersRepo interface.
type MockUsersRepo struct {
	ctrl     *gomock.Controller
	recorder *MockUsersRepoMockRecorder
	isgomock struct{}
}

// MockUsersRepoMockRecorder is the mock recorder for MockUsersRepo.
type MockUsersRepoMockRecorder struct {
	mock *MockUsersRepo
}

// NewMockUsersRepo creates a new mock instance.
func NewMockUsersRepo(ctrl *gomock.Controller) *MockUsersRepo {
	mock := &MockUsersRepo{ctrl: ctrl}
	mock.recorder = &MockUsersRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUsersRepo) EXPECT() *MockUsersRepoMockRecorder {
	return m.recorder
}

// CheckExistsByIds mocks base method.
func (m *MockUsersRepo) CheckExistsByIds(ctx context.Context, ids []int) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckExistsByIds", ctx, ids)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckExistsByIds indicates an expected call of CheckExistsByIds.
func (mr *MockUsersRepoMockRecorder) CheckExistsByIds(ctx, ids any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckExistsByIds", reflect.TypeOf((*MockUsersRepo)(nil).CheckExistsByIds), ctx, ids)
}

// MockMessagesRepo is a mock of MessagesRepo interface.
type MockMessagesRepo struct {
	ctrl     *gomock.Controller
	recorder *MockMessagesRepoMockRecorder
	isgomock struct{}
}

// MockMessagesRepoMockRecorder is the mock recorder for MockMessagesRepo.
type MockMessagesRepoMockRecorder struct {
	mock *MockMessagesRepo
}

// NewMockMessagesRepo creates a new mock instance.
func NewMockMessagesRepo(ctrl *gomock.Controller) *MockMessagesRepo {
	mock := &MockMessagesRepo{ctrl: ctrl}
	mock.recorder = &MockMessagesRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMessagesRepo) EXPECT() *MockMessagesRepoMockRecorder {
	return m.recorder
}

// GetByChatId mocks base method.
func (m *MockMessagesRepo) GetByChatId(ctx context.Context, chatId int) ([]entity.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByChatId", ctx, chatId)
	ret0, _ := ret[0].([]entity.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByChatId indicates an expected call of GetByChatId.
func (mr *MockMessagesRepoMockRecorder) GetByChatId(ctx, chatId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByChatId", reflect.TypeOf((*MockMessagesRepo)(nil).GetByChatId), ctx, chatId)
}

// MockTransaction is a mock of Transaction interface.
type MockTransaction struct {
	ctrl     *gomock.Controller
	recorder *MockTransactionMockRecorder
	isgomock struct{}
}

// MockTransactionMockRecorder is the mock recorder for MockTransaction.
type MockTransactionMockRecorder struct {
	mock *MockTransaction
}

// NewMockTransaction creates a new mock instance.
func NewMockTransaction(ctrl *gomock.Controller) *MockTransaction {
	mock := &MockTransaction{ctrl: ctrl}
	mock.recorder = &MockTransactionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTransaction) EXPECT() *MockTransactionMockRecorder {
	return m.recorder
}

// Commit mocks base method.
func (m *MockTransaction) Commit(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Commit", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Commit indicates an expected call of Commit.
func (mr *MockTransactionMockRecorder) Commit(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Commit", reflect.TypeOf((*MockTransaction)(nil).Commit), ctx)
}

// Rollback mocks base method.
func (m *MockTransaction) Rollback(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Rollback", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Rollback indicates an expected call of Rollback.
func (mr *MockTransactionMockRecorder) Rollback(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Rollback", reflect.TypeOf((*MockTransaction)(nil).Rollback), ctx)
}

// MockTransactionsManager is a mock of TransactionsManager interface.
type MockTransactionsManager struct {
	ctrl     *gomock.Controller
	recorder *MockTransactionsManagerMockRecorder
	isgomock struct{}
}

// MockTransactionsManagerMockRecorder is the mock recorder for MockTransactionsManager.
type MockTransactionsManagerMockRecorder struct {
	mock *MockTransactionsManager
}

// NewMockTransactionsManager creates a new mock instance.
func NewMockTransactionsManager(ctrl *gomock.Controller) *MockTransactionsManager {
	mock := &MockTransactionsManager{ctrl: ctrl}
	mock.recorder = &MockTransactionsManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTransactionsManager) EXPECT() *MockTransactionsManagerMockRecorder {
	return m.recorder
}

// StartTransaction mocks base method.
func (m *MockTransactionsManager) StartTransaction(ctx context.Context) (gateways.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartTransaction", ctx)
	ret0, _ := ret[0].(gateways.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartTransaction indicates an expected call of StartTransaction.
func (mr *MockTransactionsManagerMockRecorder) StartTransaction(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartTransaction", reflect.TypeOf((*MockTransactionsManager)(nil).StartTransaction), ctx)
}

// MockSlugGenerator is a mock of SlugGenerator interface.
type MockSlugGenerator struct {
	ctrl     *gomock.Controller
	recorder *MockSlugGeneratorMockRecorder
	isgomock struct{}
}

// MockSlugGeneratorMockRecorder is the mock recorder for MockSlugGenerator.
type MockSlugGeneratorMockRecorder struct {
	mock *MockSlugGenerator
}

// NewMockSlugGenerator creates a new mock instance.
func NewMockSlugGenerator(ctrl *gomock.Controller) *MockSlugGenerator {
	mock := &MockSlugGenerator{ctrl: ctrl}
	mock.recorder = &MockSlugGeneratorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSlugGenerator) EXPECT() *MockSlugGeneratorMockRecorder {
	return m.recorder
}

// GenerateRandomSlug mocks base method.
func (m *MockSlugGenerator) GenerateRandomSlug() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateRandomSlug")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateRandomSlug indicates an expected call of GenerateRandomSlug.
func (mr *MockSlugGeneratorMockRecorder) GenerateRandomSlug() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateRandomSlug", reflect.TypeOf((*MockSlugGenerator)(nil).GenerateRandomSlug))
}
