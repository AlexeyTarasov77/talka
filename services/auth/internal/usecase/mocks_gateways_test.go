// Code generated by MockGen. DO NOT EDIT.
// Source: contracts.go
//
// Generated by this command:
//
//	mockgen -source=contracts.go -destination=../usecase/mocks_gateways_test.go -package=usecase_test
//

// Package usecase_test is a generated GoMock package.
package usecase_test

import (
	context "context"
	reflect "reflect"
	time "time"

	entity "github.com/AlexeyTarasov77/messanger.users/internal/entity"
	gateways "github.com/AlexeyTarasov77/messanger.users/internal/gateways"
	gomock "go.uber.org/mock/gomock"
)

// MockUsersRepo is a mock of UsersRepo interface.
type MockUsersRepo struct {
	ctrl     *gomock.Controller
	recorder *MockUsersRepoMockRecorder
	isgomock struct{}
}

// MockUsersRepoMockRecorder is the mock recorder for MockUsersRepo.
type MockUsersRepoMockRecorder struct {
	mock *MockUsersRepo
}

// NewMockUsersRepo creates a new mock instance.
func NewMockUsersRepo(ctrl *gomock.Controller) *MockUsersRepo {
	mock := &MockUsersRepo{ctrl: ctrl}
	mock.recorder = &MockUsersRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUsersRepo) EXPECT() *MockUsersRepoMockRecorder {
	return m.recorder
}

// CheckExistsByIds mocks base method.
func (m *MockUsersRepo) CheckExistsByIds(ctx context.Context, ids []int) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckExistsByIds", ctx, ids)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckExistsByIds indicates an expected call of CheckExistsByIds.
func (mr *MockUsersRepoMockRecorder) CheckExistsByIds(ctx, ids any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckExistsByIds", reflect.TypeOf((*MockUsersRepo)(nil).CheckExistsByIds), ctx, ids)
}

// GetByOAuthAccId mocks base method.
func (m *MockUsersRepo) GetByOAuthAccId(ctx context.Context, accId string) (*entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByOAuthAccId", ctx, accId)
	ret0, _ := ret[0].(*entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByOAuthAccId indicates an expected call of GetByOAuthAccId.
func (mr *MockUsersRepoMockRecorder) GetByOAuthAccId(ctx, accId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByOAuthAccId", reflect.TypeOf((*MockUsersRepo)(nil).GetByOAuthAccId), ctx, accId)
}

// Insert mocks base method.
func (m *MockUsersRepo) Insert(ctx context.Context, user *entity.User) (*entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", ctx, user)
	ret0, _ := ret[0].(*entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Insert indicates an expected call of Insert.
func (mr *MockUsersRepoMockRecorder) Insert(ctx, user any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockUsersRepo)(nil).Insert), ctx, user)
}

// MockTransaction is a mock of Transaction interface.
type MockTransaction struct {
	ctrl     *gomock.Controller
	recorder *MockTransactionMockRecorder
	isgomock struct{}
}

// MockTransactionMockRecorder is the mock recorder for MockTransaction.
type MockTransactionMockRecorder struct {
	mock *MockTransaction
}

// NewMockTransaction creates a new mock instance.
func NewMockTransaction(ctrl *gomock.Controller) *MockTransaction {
	mock := &MockTransaction{ctrl: ctrl}
	mock.recorder = &MockTransactionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTransaction) EXPECT() *MockTransactionMockRecorder {
	return m.recorder
}

// Commit mocks base method.
func (m *MockTransaction) Commit(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Commit", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Commit indicates an expected call of Commit.
func (mr *MockTransactionMockRecorder) Commit(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Commit", reflect.TypeOf((*MockTransaction)(nil).Commit), ctx)
}

// Rollback mocks base method.
func (m *MockTransaction) Rollback(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Rollback", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Rollback indicates an expected call of Rollback.
func (mr *MockTransactionMockRecorder) Rollback(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Rollback", reflect.TypeOf((*MockTransaction)(nil).Rollback), ctx)
}

// MockTransactionsManager is a mock of TransactionsManager interface.
type MockTransactionsManager struct {
	ctrl     *gomock.Controller
	recorder *MockTransactionsManagerMockRecorder
	isgomock struct{}
}

// MockTransactionsManagerMockRecorder is the mock recorder for MockTransactionsManager.
type MockTransactionsManagerMockRecorder struct {
	mock *MockTransactionsManager
}

// NewMockTransactionsManager creates a new mock instance.
func NewMockTransactionsManager(ctrl *gomock.Controller) *MockTransactionsManager {
	mock := &MockTransactionsManager{ctrl: ctrl}
	mock.recorder = &MockTransactionsManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTransactionsManager) EXPECT() *MockTransactionsManagerMockRecorder {
	return m.recorder
}

// StartTransaction mocks base method.
func (m *MockTransactionsManager) StartTransaction(ctx context.Context) (gateways.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartTransaction", ctx)
	ret0, _ := ret[0].(gateways.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartTransaction indicates an expected call of StartTransaction.
func (mr *MockTransactionsManagerMockRecorder) StartTransaction(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartTransaction", reflect.TypeOf((*MockTransactionsManager)(nil).StartTransaction), ctx)
}

// MockOAuthProvider is a mock of OAuthProvider interface.
type MockOAuthProvider struct {
	ctrl     *gomock.Controller
	recorder *MockOAuthProviderMockRecorder
	isgomock struct{}
}

// MockOAuthProviderMockRecorder is the mock recorder for MockOAuthProvider.
type MockOAuthProviderMockRecorder struct {
	mock *MockOAuthProvider
}

// NewMockOAuthProvider creates a new mock instance.
func NewMockOAuthProvider(ctrl *gomock.Controller) *MockOAuthProvider {
	mock := &MockOAuthProvider{ctrl: ctrl}
	mock.recorder = &MockOAuthProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOAuthProvider) EXPECT() *MockOAuthProviderMockRecorder {
	return m.recorder
}

// FetchUserData mocks base method.
func (m *MockOAuthProvider) FetchUserData(ctx context.Context, accessToken string) (*entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchUserData", ctx, accessToken)
	ret0, _ := ret[0].(*entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchUserData indicates an expected call of FetchUserData.
func (mr *MockOAuthProviderMockRecorder) FetchUserData(ctx, accessToken any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchUserData", reflect.TypeOf((*MockOAuthProvider)(nil).FetchUserData), ctx, accessToken)
}

// GetAccessToken mocks base method.
func (m *MockOAuthProvider) GetAccessToken(ctx context.Context, authCode string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccessToken", ctx, authCode)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccessToken indicates an expected call of GetAccessToken.
func (mr *MockOAuthProviderMockRecorder) GetAccessToken(ctx, authCode any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccessToken", reflect.TypeOf((*MockOAuthProvider)(nil).GetAccessToken), ctx, authCode)
}

// GetAuthURL mocks base method.
func (m *MockOAuthProvider) GetAuthURL(stateToken string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAuthURL", stateToken)
	ret0, _ := ret[0].(string)
	return ret0
}

// GetAuthURL indicates an expected call of GetAuthURL.
func (mr *MockOAuthProviderMockRecorder) GetAuthURL(stateToken any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAuthURL", reflect.TypeOf((*MockOAuthProvider)(nil).GetAuthURL), stateToken)
}

// MockSessionManager is a mock of SessionManager interface.
type MockSessionManager struct {
	ctrl     *gomock.Controller
	recorder *MockSessionManagerMockRecorder
	isgomock struct{}
}

// MockSessionManagerMockRecorder is the mock recorder for MockSessionManager.
type MockSessionManagerMockRecorder struct {
	mock *MockSessionManager
}

// NewMockSessionManager creates a new mock instance.
func NewMockSessionManager(ctrl *gomock.Controller) *MockSessionManager {
	mock := &MockSessionManager{ctrl: ctrl}
	mock.recorder = &MockSessionManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSessionManager) EXPECT() *MockSessionManagerMockRecorder {
	return m.recorder
}

// GetSessionData mocks base method.
func (m *MockSessionManager) GetSessionData(ctx context.Context) (map[string]any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSessionData", ctx)
	ret0, _ := ret[0].(map[string]any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSessionData indicates an expected call of GetSessionData.
func (mr *MockSessionManagerMockRecorder) GetSessionData(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSessionData", reflect.TypeOf((*MockSessionManager)(nil).GetSessionData), ctx)
}

// SetToSession mocks base method.
func (m *MockSessionManager) SetToSession(ctx context.Context, key, value string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetToSession", ctx, key, value)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetToSession indicates an expected call of SetToSession.
func (mr *MockSessionManagerMockRecorder) SetToSession(ctx, key, value any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetToSession", reflect.TypeOf((*MockSessionManager)(nil).SetToSession), ctx, key, value)
}

// MockSessionManagerFactory is a mock of SessionManagerFactory interface.
type MockSessionManagerFactory struct {
	ctrl     *gomock.Controller
	recorder *MockSessionManagerFactoryMockRecorder
	isgomock struct{}
}

// MockSessionManagerFactoryMockRecorder is the mock recorder for MockSessionManagerFactory.
type MockSessionManagerFactoryMockRecorder struct {
	mock *MockSessionManagerFactory
}

// NewMockSessionManagerFactory creates a new mock instance.
func NewMockSessionManagerFactory(ctrl *gomock.Controller) *MockSessionManagerFactory {
	mock := &MockSessionManagerFactory{ctrl: ctrl}
	mock.recorder = &MockSessionManagerFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSessionManagerFactory) EXPECT() *MockSessionManagerFactoryMockRecorder {
	return m.recorder
}

// CreateSessionManager mocks base method.
func (m *MockSessionManagerFactory) CreateSessionManager(sessionId string) gateways.SessionManager {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSessionManager", sessionId)
	ret0, _ := ret[0].(gateways.SessionManager)
	return ret0
}

// CreateSessionManager indicates an expected call of CreateSessionManager.
func (mr *MockSessionManagerFactoryMockRecorder) CreateSessionManager(sessionId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSessionManager", reflect.TypeOf((*MockSessionManagerFactory)(nil).CreateSessionManager), sessionId)
}

// MockJwtProvider is a mock of JwtProvider interface.
type MockJwtProvider struct {
	ctrl     *gomock.Controller
	recorder *MockJwtProviderMockRecorder
	isgomock struct{}
}

// MockJwtProviderMockRecorder is the mock recorder for MockJwtProvider.
type MockJwtProviderMockRecorder struct {
	mock *MockJwtProvider
}

// NewMockJwtProvider creates a new mock instance.
func NewMockJwtProvider(ctrl *gomock.Controller) *MockJwtProvider {
	mock := &MockJwtProvider{ctrl: ctrl}
	mock.recorder = &MockJwtProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockJwtProvider) EXPECT() *MockJwtProviderMockRecorder {
	return m.recorder
}

// NewToken mocks base method.
func (m *MockJwtProvider) NewToken(expires time.Duration, claims map[string]any) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewToken", expires, claims)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewToken indicates an expected call of NewToken.
func (mr *MockJwtProviderMockRecorder) NewToken(expires, claims any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewToken", reflect.TypeOf((*MockJwtProvider)(nil).NewToken), expires, claims)
}

// MockSecurityProvider is a mock of SecurityProvider interface.
type MockSecurityProvider struct {
	ctrl     *gomock.Controller
	recorder *MockSecurityProviderMockRecorder
	isgomock struct{}
}

// MockSecurityProviderMockRecorder is the mock recorder for MockSecurityProvider.
type MockSecurityProviderMockRecorder struct {
	mock *MockSecurityProvider
}

// NewMockSecurityProvider creates a new mock instance.
func NewMockSecurityProvider(ctrl *gomock.Controller) *MockSecurityProvider {
	mock := &MockSecurityProvider{ctrl: ctrl}
	mock.recorder = &MockSecurityProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSecurityProvider) EXPECT() *MockSecurityProviderMockRecorder {
	return m.recorder
}

// GenerateSecureUrlSafeToken mocks base method.
func (m *MockSecurityProvider) GenerateSecureUrlSafeToken() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateSecureUrlSafeToken")
	ret0, _ := ret[0].(string)
	return ret0
}

// GenerateSecureUrlSafeToken indicates an expected call of GenerateSecureUrlSafeToken.
func (mr *MockSecurityProviderMockRecorder) GenerateSecureUrlSafeToken() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateSecureUrlSafeToken", reflect.TypeOf((*MockSecurityProvider)(nil).GenerateSecureUrlSafeToken))
}
