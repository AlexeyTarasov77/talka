// Code generated by MockGen. DO NOT EDIT.
// Source: mysql.go
//
// Generated by this command:
//
//	mockgen -source=mysql.go -destination=mocks_repo_test.go -package=repo_test
//

// Package repo_test is a generated GoMock package.
package repo_test

import (
	reflect "reflect"

	mysql "github.com/AlexeyTarasov77/messanger.users/pkg/mysql"
	gomock "go.uber.org/mock/gomock"
)

// MockTxFactory is a mock of TxFactory interface.
type MockTxFactory struct {
	ctrl     *gomock.Controller
	recorder *MockTxFactoryMockRecorder
	isgomock struct{}
}

// MockTxFactoryMockRecorder is the mock recorder for MockTxFactory.
type MockTxFactoryMockRecorder struct {
	mock *MockTxFactory
}

// NewMockTxFactory creates a new mock instance.
func NewMockTxFactory(ctrl *gomock.Controller) *MockTxFactory {
	mock := &MockTxFactory{ctrl: ctrl}
	mock.recorder = &MockTxFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTxFactory) EXPECT() *MockTxFactoryMockRecorder {
	return m.recorder
}

// Begin mocks base method.
func (m *MockTxFactory) Begin() (mysql.QueryableTransaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Begin")
	ret0, _ := ret[0].(mysql.QueryableTransaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Begin indicates an expected call of Begin.
func (mr *MockTxFactoryMockRecorder) Begin() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Begin", reflect.TypeOf((*MockTxFactory)(nil).Begin))
}
